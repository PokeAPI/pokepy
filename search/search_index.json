{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pokepy A python wrapper for PokeAPI . (former pykemon )","title":"Home"},{"location":"#pokepy","text":"A python wrapper for PokeAPI . (former pykemon )","title":"Pokepy"},{"location":"authors/","text":"Original Project Lead (Pykemon) Paul Hallett Maintainer Kronopt Contributors Owen Hallett Kronopt Naramsim Made a commit? Add your name to the list!","title":"Authors"},{"location":"authors/#original-project-lead-pykemon","text":"Paul Hallett","title":"Original Project Lead (Pykemon)"},{"location":"authors/#maintainer","text":"Kronopt","title":"Maintainer"},{"location":"authors/#contributors","text":"Owen Hallett Kronopt Naramsim Made a commit? Add your name to the list!","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Reporting Bugs Report bugs in the issues section . When reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fixing Bugs Look through the issues section for bugs. Anything tagged with bug is open to whoever wants to implement it. Implementing Features Look through the issues section for features. Anything tagged with feature is open to whoever wants to implement it. When proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Writing Documentation Pokepy could always use more documentation, whether as part of the official Pokepy docs, in docstrings, or even on the web in blog posts, articles, and such. Submiting Feedback The best way to send feedback is to file an issue in the issues section . Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up pokepy for local development. 1 . Fork the pokepy repo on GitHub. 2 . Clone your fork locally: $ git clone git@github.com:your_name_here/pokepy.git 3 . Install your local copy into a virtual environment. If you use an IDE, it should have an option to create a new virtual environment. Otherwise, and assuming you have virtualenv installed, this is how you set up your fork for local development: $ mkdir venv $ virtualenv venv/pokepy $ cd venv/pokepy/bin $ source activate $ pip install -r requirements.txt -r requirements-dev.txt 4 . Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 5 . When you're done making changes, check that your changes pass pylint and the tests , including testing other Python versions with tox : $ python -m pylint pokepy tests setup.py $ tox pylint and tox should already be installed in your virtualenv if you followed step 3 correctly. 6 . Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes\" $ git push origin name-of-your-bugfix-or-feature 7 . Submit a pull request through the GitHub website. Pull Request Guidelines Before submiting a pull request, check that it meets these guidelines: 1 . The pull request includes tests (if relevant). 2 . If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md . 3 . The pull request should work for Python 2.7, 3.6, and 3.7. Tips To run a subset of tests: $ pyhon -m unittest tests.test_pokepy","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#reporting-bugs","text":"Report bugs in the issues section . When reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Reporting Bugs"},{"location":"contributing/#fixing-bugs","text":"Look through the issues section for bugs. Anything tagged with bug is open to whoever wants to implement it.","title":"Fixing Bugs"},{"location":"contributing/#implementing-features","text":"Look through the issues section for features. Anything tagged with feature is open to whoever wants to implement it. When proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement.","title":"Implementing Features"},{"location":"contributing/#writing-documentation","text":"Pokepy could always use more documentation, whether as part of the official Pokepy docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Writing Documentation"},{"location":"contributing/#submiting-feedback","text":"The best way to send feedback is to file an issue in the issues section . Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submiting Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up pokepy for local development. 1 . Fork the pokepy repo on GitHub. 2 . Clone your fork locally: $ git clone git@github.com:your_name_here/pokepy.git 3 . Install your local copy into a virtual environment. If you use an IDE, it should have an option to create a new virtual environment. Otherwise, and assuming you have virtualenv installed, this is how you set up your fork for local development: $ mkdir venv $ virtualenv venv/pokepy $ cd venv/pokepy/bin $ source activate $ pip install -r requirements.txt -r requirements-dev.txt 4 . Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 5 . When you're done making changes, check that your changes pass pylint and the tests , including testing other Python versions with tox : $ python -m pylint pokepy tests setup.py $ tox pylint and tox should already be installed in your virtualenv if you followed step 3 correctly. 6 . Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes\" $ git push origin name-of-your-bugfix-or-feature 7 . Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before submiting a pull request, check that it meets these guidelines: 1 . The pull request includes tests (if relevant). 2 . If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md . 3 . The pull request should work for Python 2.7, 3.6, and 3.7.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests: $ pyhon -m unittest tests.test_pokepy","title":"Tips"},{"location":"history/","text":"History 0.5.0 (2019-01-19) Pykemon is now Pokepy! Cache (disk- and memory-based) 0.4.0 (2018-10-11) Removed code from pre-beckett versions Removed V1 API support, as it is now deprecated Added some tweaks to the beckett package 0.3.0 (2017-10-19) V2 support added Added some missing V1 resources Removed files related to API 0.1 0.2.0 (2016-06-11) Beckett API Client framework added 0.1.2 (2014-1-3) Sprite attribute added to Pokemon class 0.1.1 (2013-12-24) Description attribute added to Pokemon class 0.1.0 (2013-12-23) First release on PyPI All PokeAPI resources fully supported and represented in an object-oriented style Easy-to-use API: just one method!","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#050-2019-01-19","text":"Pykemon is now Pokepy! Cache (disk- and memory-based)","title":"0.5.0 (2019-01-19)"},{"location":"history/#040-2018-10-11","text":"Removed code from pre-beckett versions Removed V1 API support, as it is now deprecated Added some tweaks to the beckett package","title":"0.4.0 (2018-10-11)"},{"location":"history/#030-2017-10-19","text":"V2 support added Added some missing V1 resources Removed files related to API 0.1","title":"0.3.0 (2017-10-19)"},{"location":"history/#020-2016-06-11","text":"Beckett API Client framework added","title":"0.2.0 (2016-06-11)"},{"location":"history/#012-2014-1-3","text":"Sprite attribute added to Pokemon class","title":"0.1.2 (2014-1-3)"},{"location":"history/#011-2013-12-24","text":"Description attribute added to Pokemon class","title":"0.1.1 (2013-12-24)"},{"location":"history/#010-2013-12-23","text":"First release on PyPI All PokeAPI resources fully supported and represented in an object-oriented style Easy-to-use API: just one method!","title":"0.1.0 (2013-12-23)"},{"location":"installation/","text":"Installation At the command line: $ pip install pokepy","title":"Installation"},{"location":"installation/#installation","text":"At the command line: $ pip install pokepy","title":"Installation"},{"location":"usage/","text":"Usage To use Pokepy in a project: >>> import pokepy API Pokepy works with Beckett , since version 0.2.0: >>> client = pokepy.V2Client() >>> kakuna = client.get_pokemon(14)[0] <Pokemon - Kakuna> >>> kakuna.name Kakuna The following methods are defined for the V2Client and all take a single parameter ( uid ): get_berry get_berry_firmness get_berry_flavor get_contest_type get_contest_effect get_super_contest_effect get_encounter_method get_encounter_condition get_encounter_condition_value get_evolution_chain get_evolution_trigger get_generation get_pokedex get_version get_version_group get_item get_item_attribute get_item_category get_item_fling_effect get_item_pocket get_machine get_move get_move_ailment get_move_battle_style get_move_category get_move_damage_class get_move_learn_method get_move_target get_location get_location_area get_pal_park_area get_region get_ability get_characteristic get_egg_group get_gender get_growth_rate get_nature get_pokeathlon_stat get_pokemon get_pokemon_color get_pokemon_form get_pokemon_habitat get_pokemon_shape get_pokemon_species get_stat get_type get_language Please refer to the Pokeapi documentation for more information on what each of these methods returns. Then you can start grabbing stuff from the API: >>> pokepy.V2Client().get_pokemon('mew')[0] <Pokemon - Mew> >>> pokepy.V2Client().get_pokemon(14)[0] <Pokemon - Kakuna> >>> pokepy.V2Client().get_move(15)[0] <Move - Cut> >>> pokepy.V2Client().get_ability(15)[0] <Ability - stench> Some resources have subresources: >>> kakuna = pokepy.V2Client().get_pokemon(1)[0] >>> kakuna <Pokemon - Kakuna> >>> kakuna.types [<Pokemon_Type>, <Pokemon_Type>] Options Most resources can be requested by using either the name or id: >>> pokepy.V2Client().get_pokemon('rotom')[0] <Pokemon - Rotom> >>> pokepy.V2Client().get_pokemon(479)[0] <Pokemon - Rotom> Cache If you use the API to get the same resources often, you can enable cache to avoid making unnecessary requests to the pokeapi server. You can either enable in-memory or in-disk cache. Cache is kept per get method. In-memory in-memory cache saves resources in RAM. Cache is kept per get method: >>> client = pokepy.V2Client(cache='in_memory') To check the state of the cache of a particular method:: >>> kakuna = client.get_pokemon(14) >>> kakuna.get_pokemon.cache_info() CacheInfo(hits=0, misses=1, size=1) Calling the same resource as before will retrieve the resource from the cache: >>> kakuna = client.get_pokemon(14) >>> client.get_pokemon.cache_info() CacheInfo(hits=1, misses=1, size=1) To clear the cache of a specific get method: >>> client.get_pokemon.cache_clear() >>> client.get_pokemon.cache_info() CacheInfo(hits=0, misses=0, size=0) In-disk in-disk cache saves resources to the disk. Cache is kept per get method: >>> client = pokepy.V2Client(cache='in_disk', cache_location='/temp') The same methods are used as with in-memory to check the state and clear the cache. You can also check the cache directory: >>> client.get_pokemon.cache_location() /temp Disk-based cache is reloaded automatically between runs if the same cache directory is specified.","title":"Usage"},{"location":"usage/#usage","text":"To use Pokepy in a project: >>> import pokepy","title":"Usage"},{"location":"usage/#api","text":"Pokepy works with Beckett , since version 0.2.0: >>> client = pokepy.V2Client() >>> kakuna = client.get_pokemon(14)[0] <Pokemon - Kakuna> >>> kakuna.name Kakuna The following methods are defined for the V2Client and all take a single parameter ( uid ): get_berry get_berry_firmness get_berry_flavor get_contest_type get_contest_effect get_super_contest_effect get_encounter_method get_encounter_condition get_encounter_condition_value get_evolution_chain get_evolution_trigger get_generation get_pokedex get_version get_version_group get_item get_item_attribute get_item_category get_item_fling_effect get_item_pocket get_machine get_move get_move_ailment get_move_battle_style get_move_category get_move_damage_class get_move_learn_method get_move_target get_location get_location_area get_pal_park_area get_region get_ability get_characteristic get_egg_group get_gender get_growth_rate get_nature get_pokeathlon_stat get_pokemon get_pokemon_color get_pokemon_form get_pokemon_habitat get_pokemon_shape get_pokemon_species get_stat get_type get_language Please refer to the Pokeapi documentation for more information on what each of these methods returns. Then you can start grabbing stuff from the API: >>> pokepy.V2Client().get_pokemon('mew')[0] <Pokemon - Mew> >>> pokepy.V2Client().get_pokemon(14)[0] <Pokemon - Kakuna> >>> pokepy.V2Client().get_move(15)[0] <Move - Cut> >>> pokepy.V2Client().get_ability(15)[0] <Ability - stench> Some resources have subresources: >>> kakuna = pokepy.V2Client().get_pokemon(1)[0] >>> kakuna <Pokemon - Kakuna> >>> kakuna.types [<Pokemon_Type>, <Pokemon_Type>]","title":"API"},{"location":"usage/#options","text":"Most resources can be requested by using either the name or id: >>> pokepy.V2Client().get_pokemon('rotom')[0] <Pokemon - Rotom> >>> pokepy.V2Client().get_pokemon(479)[0] <Pokemon - Rotom>","title":"Options"},{"location":"usage/#cache","text":"If you use the API to get the same resources often, you can enable cache to avoid making unnecessary requests to the pokeapi server. You can either enable in-memory or in-disk cache. Cache is kept per get method.","title":"Cache"},{"location":"usage/#in-memory","text":"in-memory cache saves resources in RAM. Cache is kept per get method: >>> client = pokepy.V2Client(cache='in_memory') To check the state of the cache of a particular method:: >>> kakuna = client.get_pokemon(14) >>> kakuna.get_pokemon.cache_info() CacheInfo(hits=0, misses=1, size=1) Calling the same resource as before will retrieve the resource from the cache: >>> kakuna = client.get_pokemon(14) >>> client.get_pokemon.cache_info() CacheInfo(hits=1, misses=1, size=1) To clear the cache of a specific get method: >>> client.get_pokemon.cache_clear() >>> client.get_pokemon.cache_info() CacheInfo(hits=0, misses=0, size=0)","title":"In-memory"},{"location":"usage/#in-disk","text":"in-disk cache saves resources to the disk. Cache is kept per get method: >>> client = pokepy.V2Client(cache='in_disk', cache_location='/temp') The same methods are used as with in-memory to check the state and clear the cache. You can also check the cache directory: >>> client.get_pokemon.cache_location() /temp Disk-based cache is reloaded automatically between runs if the same cache directory is specified.","title":"In-disk"}]}